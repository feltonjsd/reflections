What happens when you initialize a repository? Why do you need to do it?

	It creates a .git file which is hidden metadata. This allows you to store files in a git repository.
	
How is the staging area different from the working directory and the repository? What value do you think it offers?

	The staging area stores files to be commited to the repository
	The working area stores all files.
	
How can you use the staging area to make sure you have one commit per logical change?

	Add each file to the staging area in turn and commit seperatly
	
What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	branches can help with experimental code or code of different/older versions.
	
How do the diagrams help you visualize the branch structure?

	They help by being able to see all of the different branches and the commits that make them up.
	
What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	All the commits from the 2 branches are held in one branch. The diagram helps to see which commits are being merged from which branches.
	
What are the pros and cons of Git’s automatic merging vs. always doing merges manually?

		automatic merging 
			pros : non conflicst are merged automatically so quicker and easier
			cons : conflicts have to me manually merged
			
		manual merging 
			pros : more control over what code gets merged
			cons : more time consuming for non conflicts which could be automatically merged
			
git add  |    Add a file to the staging area
git commit  |    Commit the files from the staging area to the repository 
git status  |    Show which files are in the staging area, and which files from the working directory are not part of the repository    
git diff  |    Git diff without arguments is comparing the working directory with the staging area
git diff --staged  |    Compare the staging area with the repository
git reset --hard  |    Undo all changes! There is no rollback for this, so be carefull!
git checkout master  |    Restore the "Head" to the latest check-in (this will be part of a later lesson/module)
git log --graph --oneline <branch1> <branch2>  |    Show a visual representation of the commit history within different branches
git checkout -b new_branch_name  |    Creates a new branch and do a checkout on this branch in one call instead of git branch new_branch_name and git checkout new_branch_name
git merge branch1 branch2  |    Merge two branches, branch2 get merged into branch1
git branch -d name  |    Remove the branch with the specified name
git show commitId  |    Show the changes made in this commit compared to the previous version. This is working even after merging.

git config --global credential.helper wincred

…or create a new repository on the command line

echo "# reflections" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/feltonjsd/reflections.git
git push -u origin master
…or push an existing repository from the command line


git remote add origin https://github.com/feltonjsd/reflections.git
git push -u origin master

git pull origin master
